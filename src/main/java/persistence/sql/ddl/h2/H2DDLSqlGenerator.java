package persistence.sql.ddl.h2;

import jakarta.persistence.GenerationType;
import persistence.entity.metadata.EntityColumn;
import persistence.sql.ddl.DDLSqlGenerator;
import persistence.sql.h2.H2Dialect;

public class H2DDLSqlGenerator extends DDLSqlGenerator {

    public H2DDLSqlGenerator() {
        super(new H2Dialect());
    }

    @Override
    protected String getColumnClause(EntityColumn entityColumn) {
        StringBuilder columnClause = new StringBuilder();
        String columnDefinition = String.format("%s %s ", entityColumn.getColumnName(), getColumnDataType(entityColumn));

        columnClause.append(columnDefinition);
        columnClause.append(getColumnConstraint(entityColumn));

        return columnClause.toString();
    }

    private String getColumnConstraint(EntityColumn entityColumn) {
        StringBuilder columnClause = new StringBuilder();
        String nullable = getNullable(entityColumn);
        String columnProperty = getColumnGenerator(entityColumn);
        String PK = getPrimaryKey(entityColumn);

        if (!columnProperty.isEmpty()) {
            columnClause.append(columnProperty);
            columnClause.append(" ");
        }
        if (!PK.isEmpty()) {
            columnClause.append(PK);
            columnClause.append(" ");
        }
        if (!nullable.isEmpty()) {
            columnClause.append(nullable);
            columnClause.append(" ");
        }

        return columnClause.toString();
    }

    private String getPrimaryKey(EntityColumn entityColumn) {
        if (entityColumn.isPrimaryKey()) {

            return "PRIMARY KEY";
        }

        return "";
    }
    private String getNullable(EntityColumn entityColumn) {
        return entityColumn.isNullable() ? "" : "NOT NULL";
    }
    private String getColumnGenerator(EntityColumn entityColumn) {
        if (entityColumn.isDataAutoGenerated()) {
            if (entityColumn.isPrimaryKey() && entityColumn.getGenerationType() == GenerationType.IDENTITY) {

                return "AUTO_INCREMENT";
            }
        }

        return "";
    }

    // TODO refactor this method
    private String getColumnDataType(EntityColumn entityColumn) {
        String columnType = dialect.getDataType(entityColumn.getSqlTypeCode());

        if ("VARCHAR".equals(columnType)) {
            int length = entityColumn.getLength();

            if (length == 0) {
                length = 255;
            }

            return columnType + "(" + length + ")";
        }

        return columnType;
    }
}
