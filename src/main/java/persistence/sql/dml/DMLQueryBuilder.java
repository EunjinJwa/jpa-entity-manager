package persistence.sql.dml;

import persistence.entity.metadata.EntityColumn;
import persistence.entity.metadata.EntityColumns;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class DMLQueryBuilder {

    private static DMLQueryBuilder dmlQueryBuilder = null;

    public static DMLQueryBuilder getInstance() {
        if (dmlQueryBuilder == null) {
            dmlQueryBuilder = new DMLQueryBuilder();
        }
        return dmlQueryBuilder;
    }

    private static final  String COLUMN_SEPARATOR = ", ";

    public String insertSql(String tableName, EntityColumns columns, Map<String, Object> columnValues) {
        List<EntityColumn> insertTargetColumns = getInsertTargetColumns(columns);

        return DMLQueryFormatter.createInsertQuery(tableName, getColumnNamesClause(insertTargetColumns), getColumnValuesClause(insertTargetColumns, columnValues));
    }

    private String getColumnValuesClause(List<EntityColumn> columns, Map<String, Object> columnValues) {
        return columns.stream()
                .map(column -> formatValue(columnValues.get(column.getColumnName())))
                .collect(Collectors.joining(COLUMN_SEPARATOR));
    }

    private String getColumnNamesClause(List<EntityColumn> insertTargetColumns) {
        return insertTargetColumns.stream()
                .map(EntityColumn::getColumnName)
                .collect(Collectors.joining(COLUMN_SEPARATOR));
    }

    private List<EntityColumn> getInsertTargetColumns(EntityColumns columns) {
        return columns.getColumns().stream()
                .filter(column -> !column.isDataAutoGenerated())
                .collect(Collectors.toList());
    }

    public String selectAllSql(String tableName, EntityColumns columns) {
        String columnsClause = columns.getColumns().stream()
                .map(EntityColumn::getColumnName)
                .collect(Collectors.joining(COLUMN_SEPARATOR));

        return DMLQueryFormatter.createSelectQuery(tableName, columnsClause);
    }

    public String selectByIdQuery(String tableName, EntityColumns columns, Object id) {
        String sql = selectAllSql(tableName, columns);
        String condition = createCondition(columns.getIdColumn().getColumnName(), id, "=");

        return DMLQueryFormatter.createSelectByConditionQuery(sql, condition);

    }

    public String updateSql(String tableName, EntityColumns columns, Map<String, Object> columnValues) {
        String columnValueSetClause = updateColumnValueSetClause(getInsertTargetColumns(columns), columnValues);
        String conditionClause = wherePrimaryKeyClause(columns, columnValues);

        return DMLQueryFormatter.createUpdateQuery(tableName, columnValueSetClause, conditionClause);
    }

    private String updateColumnValueSetClause(List<EntityColumn> columns, Map<String, Object> columnValues) {
        StringBuilder columnValueSetClause = new StringBuilder();
        columns.forEach(column -> appendOperator(columnValueSetClause, COLUMN_SEPARATOR).append(updateColumnValueSet(column.getColumnName(), columnValues.get(column.getColumnName()))));

        return columnValueSetClause.toString();
    }

    private String updateColumnValueSet(String columnName, Object value) {
        return columnName + " = " + formatValue(value);
    }

    private StringBuilder appendOperator(StringBuilder columnValueSetClause, String operator) {
        if (columnValueSetClause.length() > 0) {
            return columnValueSetClause.append(operator);
        }
        return columnValueSetClause;
    }

    public String deleteSql(String tableName, EntityColumns columns, Map<String, Object> columnValues) {
        String conditionClause = wherePrimaryKeyClause(columns, columnValues);

        return DMLQueryFormatter.createDeleteQuery(tableName, conditionClause);
    }
    private String wherePrimaryKeyClause(EntityColumns columns, Map<String, Object> columnValues) {
        String idColumnName = columns.getIdColumn().getColumnName();
        Object value = columnValues.get(idColumnName);
        return createCondition(idColumnName, value, "=");
    }

    private String createCondition(String columnName, Object value, String operator) {

        return String.format("%s %s %s", columnName, operator, formatValue(value));
    }

    private String formatValue(Object value) {
        if (value instanceof String) {

            return "'" + value + "'";
        }

        return value == null ? "" : value.toString();
    }


}
