package persistence.entity.metadata;

import jakarta.persistence.GenerationType;

import java.lang.reflect.Field;

public class EntityColumn {
    private Field field;
    private String fieldName;
    private String columnName;
    private int sqlTypeCode;
    private boolean isPrimaryKey;
    private boolean isNullable;
    private GenerationType generationType;
    private int length;

    public Field getField() {
        return field;
    }

    public void setField(Field field) {
        this.field = field;
    }

    public String getFieldName() {
        return fieldName;
    }

    public void setFieldName(String fieldName) {
        this.fieldName = fieldName;
    }

    public boolean isDataAutoGenerated() {
        return isPrimaryKey && generationType != null;
    }

    public String getColumnName() {
        return columnName;
    }

    public int getSqlTypeCode() {
        return sqlTypeCode;
    }

    public boolean isPrimaryKey() {
        return isPrimaryKey;
    }

    public boolean isNullable() {
        return isNullable;
    }

    public GenerationType getGenerationType() {
        return generationType;
    }

    public int getLength() {
        return length;
    }

    public void setColumnName(String columnName) {
        this.columnName = columnName;
    }

    public void setSqlTypeCode(int sqlTypeCode) {
        this.sqlTypeCode = sqlTypeCode;
    }

    public void setPrimaryKey(boolean primaryKey) {
        isPrimaryKey = primaryKey;
    }

    public void setNullable(boolean nullable) {
        isNullable = nullable;
    }

    public void setGenerationType(GenerationType generationType) {
        this.generationType = generationType;
    }

    public void setLength(int length) {
        this.length = length;
    }

    @Override
    public String toString() {
        return "EntityColumn{" +
            "name='" + columnName + '\'' +
            ", sqlTypeCode=" + sqlTypeCode +
            ", isPrimaryKey=" + isPrimaryKey +
            ", isNullable=" + isNullable +
            ", generationType=" + generationType +
            ", length=" + length +
            '}';
    }

    public Object getValue(Object entity) {
        field.setAccessible(true);
        try {
            return field.get(entity);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }

    public void setValue(Object object, Object value) {
        field.setAccessible(true);
        try {
            field.set(object, value);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }
}
